tmpdir="/tmp/aurpac2/"

db_add() {
	dbvar+=("$(
		printf "%s·%s·%s·%s\n" \
			"$2" \
			"$3" \
			"$1" \
			"$4"
		)")
}

get_repo_deps() {
	local deps="$(cat $1)" c=0

	while read LINE; do
		if [ "${LINE:0:1}" = "%" ]; then
			if [ "$LINE" = "%DEPENDS%" ]; then
				c=1
			else
				c=0
			fi
		else
			if [ "$c" = "1" ]; then
				strip_deps "$LINE"
			fi
		fi
	done << OUTPUT
$deps
OUTPUT
}

dl_aur_pb() {
	local dir file="$1.tar.gz" url i

	test -d "$tmpdir/source" || mkdir -p "$tmpdir/source"
	test -d "$tmpdir/build" || mkdir -p "$tmpdir/build"

	printf "\n %s %s... %s\r" $"Downloading" "$file" "0%"

	for i in 1 2; do
		case $i in
			1)
				url=$(echo "$json"|sed -r 's/.*"[Uu][Rr][Ll][Pp][Aa][Tt][Hh]":[ "]*([^",]*).*/\1/g; s/\\\//\//g')
				if [ -z "$url" ];then
					return 1
				else
					url="http://aur.archlinux.org$url"
				fi
			;;
			2) url="http://aur.archlinux.org/packages/$1/$1.tar.gz";;
		esac
	
		wget -c --progress=dot "$url" -O "$tmpdir/source/$file" 2>&1 \
		| awk '
			BEGIN {ORS="\r"}
			/\.\.\.\..*%/ { print " '$"Downloading"' '"$file"'... "$7 }
		'

		[ -s "$tmpdir/source/$file" ] && break
	done
	
	if [ -s "$tmpdir/source/$file" ]; then
		printf " %s %s... %s" $"Downloading" "$file" $"done"
	else
		printf " %s %s... %s" $"Downloading" "$file" $"fail"
		exit 1
	fi

	printf $"\n Untaring %s..." "$file"
	if dir="$tmpdir/build/$(
		tar -xvf "$tmpdir/source/$1.tar.gz" -C "$tmpdir/build/" 2>/dev/null \
		| sed '/PKGBUILD$/!d; s/PKGBUILD$//g'
	)"; then
		printf " %s" $"done"
	else
		printf " %s" $"fail"
		exit 1
	fi

	cd "$dir"
}
get_aur_json() {
	local json type

	json="$(
		wget 'http://aur.archlinux.org/rpc.php?type=info&arg='"$1" -O - 2> /dev/null
	)" || return $?

	if [ ! -z "$json" ]; then
		type="$(
			printf "%s" "$json" \
			| sed -r 's/.*"[Tt][Yy][Pp][Ee]":[ "]*([^",]*).*/\1/g'
		)"
		case $type in
			info|search) printf "%s" "$json"; return 0;;
			error) return 254;;
			*) return 255;;
		esac
	fi
}
strip_deps() {
	local dep
	dep="$(echo "$1" | sed -e 's|=.*$||' -e 's|>.*$||' -e 's|<.*$||')"
	if [ "$(pacman -T "$dep")" = "$dep" ]; then
		printf "%s " "$dep"
	fi
}
get_aur_deps() {
	local pb c="0"

	if [ -f "./PKGBUILD" ]; then
		pb="$(
			sed '
				s/ /\n/g
				s/(/(\n/g
				s/)/\n)/g
				s/'"'"'\|'"\""'//g
				s/\t//g
			' PKGBUILD
		)"
	else
		return 1
	fi

	while read LINE; do
		case $LINE in
			'depends=('|'makedepends=(') c="1";;
			')'*) c="0";;
			'') continue;;
			*) [ "$c" = "1" ] && strip_deps "$LINE";;
		esac
	done << OUTPUT
$pb
OUTPUT
}

db_prepare() {
	local pkg i deps json path 

	[ ! -z "$1" ] || return 1
	[ ! -z "$2" ] || master="$1"
	[ "$1" = "$2" ] && printf $"\nChecking depends for $1..."

	pacmanSiv="$(LANGUAGE=C pacman -Siv "$1" 2> /dev/null)"
	deps="$(echo "$pacmanSiv" \
		| awk -F: '
			/^DB Path/ {print $2"sync/"}
			/^Repository/ {print $2"/"}
			/^Name/ {print $2"-"}
			/^Version/ {print $2"/depends"}
		' \
		| sed 's/^ //g' \
		| tr -d "\n"
	)"

	if [ -f "$deps" ]; then
		deps="$(get_repo_deps "$deps")"
		path="$(echo "$pacmanSiv" \
			|	awk -F: '
				/^Cache Dirs|^Name/ {print $2}
				/^Version/ {print "-"$2"-"}
				/^Architecture/ {print $2".pkg.tar.gz"}
			' \
			| tr -d "\n" \
			| tr -d " "
		)"
		ver="$(echo "$pacmanSiv" \
			|	awk -F: '
				/^Version/ {print $2}
			' \
			| tr -d " "
		)"
		for i in ${deps}; do
			db_prepare "$i" "${2:-$master}"
		done
		db_add "${2:-$master}" "$1" "$ver" "$path"
	else
		if json="$(get_aur_json "$1")"; then
			if dl_aur_pb "$1" "$json"; then
				path="$PWD"
				ver="$(
					echo "$json" \
					| sed -r 's/.*[s/.*"[Vv][Ee][Rr][Ss][Ii][Oo][Nn]":[ "]*([^",]*).*/\1/g'
				)"
				deps="$(get_aur_deps "$1")"
				for i in ${deps}; do
					db_prepare "$i" "${2:-$master}"
				done
				db_add "${2:-$master}" "$1" "$ver" "$path"
			fi
		else
			printf "Package %s not found...\n" "$1"
			exit 1
		fi
	fi
}

start_opt_S() {
	printf "==> Resolving dependencies..."
	for i in $@; do
		db_prepare "$i" "$i"
	done

	printf "\n\n%s" "Cele (${#dbvar[*]}):  "
	echo "${dbvar[*]}"|tr " " "\n"|awk -F· '{ print $1"-"$2}'|sort|tr "\n" "  "
	printf "\n\n"

	read -p "Czy kontynuować? " yesno
	if [ "$yesno" = "t" ]; then
		for i in ${!dbvar[*]}; do
			path="$(echo "${dbvar[i]}" | awk -F· '{print $4}')"
			depname="$(echo "${dbvar[i]}" | awk -F· '{print $3}')"
			name="$(echo "${dbvar[i]}" | awk -F· '{print $1}')"

			[ "$name" = "$depname" ] && asdeps="" || asdeps="--asdeps"

			if [ "$err" = "1" ]; then
				printf "\n==> (%s) Skipping \"%s\"%s...\n" \
					"$[i+1]/${#dbvar[*]}" \
					"$name" \
					"$([ -z "$asdeps" ] || printf " %s" "as deps")"
				skipped+=("$name")
				if [ "$asdeps" = "" ]; then
					err="0"
				fi
			else
				printf "\n==> (%s) Instaling \"%s\"%s...\n" \
					"$[i+1]/${#dbvar[*]}" \
					"$name" \
					"$([ -z "$asdeps" ] || printf " as deps for \"%s\"" "$depname")"
				if [ -f "$path/PKGBUILD" ]; then
					echo "no_aurinstall_yet \"$path\" \"$asdeps\""
					if [ "$?" = "0" ]; then
						installed+=("$name")
					else
						err="1"
						errorin+=("$name")
						printf "==> (%s) Error in \"%s\"...\n" \
							"$[i+1]/${#dbvar[*]}" \
							"$name"
					fi
				else
					if [ ! -f "$path" ]; then
						path="$(
							sudo pacman -Sp --nodeps "$(
								echo "${dbvar[i]}" \
								| awk -F· '{print $1}'
							)" \
							| sed '/^http\|^ftp\|rsync/!d'
						)"
					fi
					if echo "sudo pacman -U --noconfirm --nodeps $asdeps $path"; then
						installed+=("$name")
					else
						err="1"
						errorin+=("$name")
						printf "==> (%s) Error in \"%s\"...\n" \
							"$[i+1]/${#dbvar[*]}" \
							"$name"
					fi
				fi
			fi
		done
		printf "\n==> Rapport about installation process..\n"
		[ -z "${installed[*]}" ] || printf "This packages installed successfully: %s\n" "${installed[*]}"
		[ -z "${skipped[*]}" ] || printf "This packages has been skipped: %s\n" "${skipped[*]}"
		[ -z "${errorin[*]}" ] || printf "This packages installed with error: %s\n" "${errorin[*]}"
	fi
}

start_opt_S $@
